import { useState, useEffect } from 'react';
import { useParams, useLocation } from 'react-router-dom';
import { Zap, Download, GitPullRequest, Code, Clock } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { apiService } from '../services/api';
import { GitHubFile, TestCaseSummary, GeneratedTestCase } from '../types';

export function TestGeneratorPage() {
  const { owner, repo } = useParams<{ owner: string; repo: string }>();
  const location = useLocation();
  const { token } = useAuth();
  
  const selectedFiles = location.state?.selectedFiles as GitHubFile[] || [];
  
  const [summaries, setSummaries] = useState<TestCaseSummary[]>([]);
  const [generatedTests, setGeneratedTests] = useState<GeneratedTestCase[]>([]);
  const [loading, setLoading] = useState(false);
  const [generatingCode, setGeneratingCode] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const getComplexityColor = (complexity: string) => {
    switch (complexity.toLowerCase()) {
      case 'low': return 'bg-green-900 text-green-300';
      case 'medium': return 'bg-yellow-900 text-yellow-300';
      case 'high': return 'bg-red-900 text-red-300';
      default: return 'bg-gray-700 text-gray-300';
    }
  };

  useEffect(() => {
    if (selectedFiles.length > 0 && token && owner && repo) {
      generateSummaries();
    }
  }, []);

  const generateSummaries = async () => {
    try {
      setLoading(true);
      const result = await apiService.generateTestCaseSummaries(
        token!,
        selectedFiles,
        owner!,
        repo!
      );
      setSummaries(result.summaries);
      setError(null);
    } catch (err) {
      setError('Failed to generate test case summaries. Please try again.');
      console.error('Error generating summaries:', err);
    } finally {
      setLoading(false);
    }
  };

  const generateTestCode = async (summary: TestCaseSummary) => {
    try {
      setGeneratingCode(summary.id);
      const testCase = await apiService.generateTestCode(
        token!,
        summary,
        selectedFiles,
        owner!,
        repo!
      );
      
      setGeneratedTests(prev => {
        const existing = prev.findIndex(t => t.id === testCase.id);
        if (existing >= 0) {
          const updated = [...prev];
          updated[existing] = testCase;
          return updated;
        }
        return [...prev, testCase];
      });
      
      setError(null);
    } catch (err) {
      setError('Failed to generate test code. Please try again.');
      console.error('Error generating test code:', err);
    } finally {
      setGeneratingCode(null);
    }
  };

  const createPullRequest = async () => {
    if (generatedTests.length === 0) return;
    
    try {
      const title = `Add generated test cases for ${selectedFiles.length} files`;
      const body = `This PR adds ${generatedTests.length} test cases generated by AI for the following files:\n\n${selectedFiles.map(f => `- ${f.path}`).join('\n')}`;
      
      await apiService.createPullRequest(
        token!,
        owner!,
        repo!,
        title,
        body,
        generatedTests
      );
      
      alert('Pull request created successfully!');
    } catch (err) {
      setError('Failed to create pull request. Please try again.');
      console.error('Error creating PR:', err);
    }
  };

  if (selectedFiles.length === 0) {
    return (
      <div className="text-center py-12">
        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-6 max-w-md mx-auto">
          <p className="text-yellow-600">No files selected for test generation.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-6xl mx-auto">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-white mb-2">
          Generate Test Cases
        </h1>
        <p className="text-gray-300 mb-4">
          AI-generated test case suggestions for {selectedFiles.length} selected files in {owner}/{repo}.
        </p>
      </div>

      {error && (
        <div className="bg-red-900 border border-red-700 rounded-lg p-4 mb-6">
          <p className="text-red-300">{error}</p>
        </div>
      )}

      {loading ? (
        <div className="flex items-center justify-center py-12">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
            <p className="text-gray-300">Generating test case summaries...</p>
          </div>
        </div>
      ) : (
        <div className="space-y-6">
          <div className="grid gap-4">
            {summaries.map((summary) => {
              const generatedTest = generatedTests.find(t => t.id === summary.id);
              const isGenerating = generatingCode === summary.id;
              
              return (
                <div key={summary.id} className="bg-gray-800 border border-gray-700 rounded-lg p-6">
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex-1">
                      <h3 className="text-lg font-semibold text-white mb-2">
                        {summary.title}
                      </h3>
                      <p className="text-gray-300 mb-3">{summary.description}</p>
                      
                      <div className="flex items-center space-x-4 text-sm">
                        <span className="flex items-center space-x-1">
                          <Code className="h-4 w-4 text-gray-400" />
                          <span>{summary.framework}</span>
                        </span>
                        <span className="flex items-center space-x-1">
                          <Clock className="h-4 w-4 text-gray-400" />
                          <span>~{summary.estimatedLines} lines</span>
                        </span>
                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${getComplexityColor(summary.complexity)}`}>
                          {summary.complexity}
                        </span>
                      </div>
                    </div>
                    
                    <div className="ml-4">
                      {generatedTest ? (
                        <div className="flex items-center space-x-2">
                          <span className="text-green-600 text-sm">âœ“ Generated</span>
                          <button
                            onClick={() => generateTestCode(summary)}
                            className="text-blue-600 hover:text-blue-700 text-sm"
                          >
                            Regenerate
                          </button>
                        </div>
                      ) : (
                        <button
                          onClick={() => generateTestCode(summary)}
                          disabled={isGenerating}
                          className="flex items-center space-x-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50"
                        >
                          {isGenerating ? (
                            <>
                              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                              <span>Generating...</span>
                            </>
                          ) : (
                            <>
                              <Zap className="h-4 w-4" />
                              <span>Generate Code</span>
                            </>
                          )}
                        </button>
                      )}
                    </div>
                  </div>
                  
                  {generatedTest && (
                    <div className="mt-4 border-t border-gray-700 pt-4">
                      <div className="flex items-center justify-between mb-2">
                        <h4 className="font-medium text-white">
                          Generated Test: {generatedTest.filename}
                        </h4>
                        <button
                          onClick={() => {
                            const blob = new Blob([generatedTest.code], { type: 'text/plain' });
                            const url = URL.createObjectURL(blob);
                            const a = document.createElement('a');
                            a.href = url;
                            a.download = generatedTest.filename;
                            a.click();
                            URL.revokeObjectURL(url);
                          }}
                          className="flex items-center space-x-1 text-gray-300 hover:text-white text-sm"
                        >
                          <Download className="h-4 w-4" />
                          <span>Download</span>
                        </button>
                      </div>
                      <pre className="code-preview bg-gray-900 border border-gray-700 p-4 rounded-lg overflow-x-auto text-sm font-mono">
                        <code className="text-gray-100 leading-relaxed">{generatedTest.code}</code>
                      </pre>
                    </div>
                  )}
                </div>
              );
            })}
          </div>
          
          {generatedTests.length > 0 && (
            <div className="flex justify-center">
              <button
                onClick={createPullRequest}
                className="flex items-center space-x-2 bg-green-600 text-white px-6 py-3 rounded-lg text-lg font-medium hover:bg-green-700 transition-colors"
              >
                <GitPullRequest className="h-5 w-5" />
                <span>Create Pull Request ({generatedTests.length} tests)</span>
              </button>
            </div>
          )}
        </div>
      )}
    </div>
  );
}
