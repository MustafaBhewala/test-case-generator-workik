module.exports = async (req, res) => {
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
  
  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    // Get the token from Authorization header
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return res.status(401).json({ error: 'No valid authorization token provided' });
    }

    const token = authHeader.replace('Bearer ', '');
    const { summary, files, owner, repo } = req.body;
    
    if (!summary || !files || !owner || !repo) {
      return res.status(400).json({ error: 'Summary, files, owner, and repo parameters are required' });
    }

    console.log(`Generating test code for ${summary.title} in ${owner}/${repo}`);

    // Generate mock test code based on the framework
    let testCode = '';
    let filename = '';
    let language = '';

    switch (summary.framework) {
      case 'Jest':
        language = 'javascript';
        filename = `${summary.title.toLowerCase().replace(/\s+/g, '-')}.test.js`;
        testCode = `// ${summary.title}
// Generated by Test Case Generator

describe('${summary.title}', () => {
  beforeEach(() => {
    // Setup code here
  });

  afterEach(() => {
    // Cleanup code here
  });

  describe('Basic functionality tests', () => {
    test('should handle normal input correctly', () => {
      // Test implementation
      expect(true).toBe(true);
    });

    test('should handle edge cases', () => {
      // Edge case testing
      expect(true).toBe(true);
    });
  });

  describe('Error handling tests', () => {
    test('should throw error for invalid input', () => {
      // Error handling tests
      expect(() => {
        // Code that should throw
      }).toThrow();
    });
  });

  describe('Integration tests', () => {
    test('should work with other components', () => {
      // Integration testing
      expect(true).toBe(true);
    });
  });
});`;
        break;

      case 'pytest':
        language = 'python';
        filename = `test_${summary.title.toLowerCase().replace(/\s+/g, '_')}.py`;
        testCode = `# ${summary.title}
# Generated by Test Case Generator

import pytest

class Test${summary.title.replace(/\s+/g, '')}:
    
    def setup_method(self):
        """Setup method called before each test."""
        pass
    
    def teardown_method(self):
        """Teardown method called after each test."""
        pass
    
    def test_normal_functionality(self):
        """Test normal functionality."""
        assert True
    
    def test_edge_cases(self):
        """Test edge cases."""
        assert True
    
    def test_error_handling(self):
        """Test error handling."""
        with pytest.raises(Exception):
            # Code that should raise exception
            pass
    
    def test_integration(self):
        """Test integration with other components."""
        assert True`;
        break;

      case 'JUnit':
        language = 'java';
        filename = `${summary.title.replace(/\s+/g, '')}Test.java`;
        testCode = `// ${summary.title}
// Generated by Test Case Generator

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.AfterEach;
import static org.junit.jupiter.api.Assertions.*;

public class ${summary.title.replace(/\s+/g, '')}Test {
    
    @BeforeEach
    void setUp() {
        // Setup code here
    }
    
    @AfterEach
    void tearDown() {
        // Cleanup code here
    }
    
    @Test
    void testNormalFunctionality() {
        // Test normal functionality
        assertTrue(true);
    }
    
    @Test
    void testEdgeCases() {
        // Test edge cases
        assertTrue(true);
    }
    
    @Test
    void testErrorHandling() {
        // Test error handling
        assertThrows(Exception.class, () -> {
            // Code that should throw exception
        });
    }
    
    @Test
    void testIntegration() {
        // Test integration
        assertTrue(true);
    }
}`;
        break;

      default:
        language = 'javascript';
        filename = `${summary.title.toLowerCase().replace(/\s+/g, '-')}.test.js`;
        testCode = `// ${summary.title}
// Generated by Test Case Generator

// Basic test template
describe('${summary.title}', () => {
  test('should work correctly', () => {
    expect(true).toBe(true);
  });
});`;
    }

    const generatedTest = {
      id: summary.id,
      summary: summary,
      code: testCode,
      filename: filename,
      language: language
    };

    console.log(`Generated test code: ${filename} (${testCode.length} characters)`);

    res.json(generatedTest);

  } catch (error) {
    console.error('Error generating test code:', error);
    res.status(500).json({ 
      error: 'Internal server error', 
      message: error.message 
    });
  }
};
