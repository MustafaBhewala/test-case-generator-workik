module.exports = async (req, res) => {
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
  
  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    // Get the token from Authorization header
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return res.status(401).json({ error: 'No valid authorization token provided' });
    }

    const token = authHeader.replace('Bearer ', '');
    const { owner, repo, title, body, testFiles, branchName } = req.body;
    
    if (!owner || !repo || !title || !testFiles || !Array.isArray(testFiles)) {
      return res.status(400).json({ error: 'Owner, repo, title, and testFiles parameters are required' });
    }

    console.log(`Creating pull request for ${owner}/${repo}: ${title}`);

    const finalBranchName = branchName || `test-generation-${Date.now()}`;
    
    // Step 1: Get the default branch reference
    const defaultBranchResponse = await fetch(`https://api.github.com/repos/${owner}/${repo}`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Accept': 'application/vnd.github.v3+json',
        'User-Agent': 'Test-Case-Generator'
      }
    });

    if (!defaultBranchResponse.ok) {
      throw new Error('Failed to get repository information');
    }

    const repoData = await defaultBranchResponse.json();
    const defaultBranch = repoData.default_branch;

    // Step 2: Get the latest commit SHA from the default branch
    const refResponse = await fetch(`https://api.github.com/repos/${owner}/${repo}/git/ref/heads/${defaultBranch}`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Accept': 'application/vnd.github.v3+json',
        'User-Agent': 'Test-Case-Generator'
      }
    });

    if (!refResponse.ok) {
      throw new Error('Failed to get default branch reference');
    }

    const refData = await refResponse.json();
    const latestCommitSha = refData.object.sha;

    // Step 3: Create a new branch
    const createBranchResponse = await fetch(`https://api.github.com/repos/${owner}/${repo}/git/refs`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Accept': 'application/vnd.github.v3+json',
        'User-Agent': 'Test-Case-Generator',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        ref: `refs/heads/${finalBranchName}`,
        sha: latestCommitSha
      })
    });

    if (!createBranchResponse.ok) {
      throw new Error('Failed to create new branch');
    }

    // Step 4: Create/update files for each test case
    const createdFiles = [];
    for (const testFile of testFiles) {
      const filePath = `tests/${testFile.filename}`;
      
      // Create the file content
      const fileContent = Buffer.from(testFile.code).toString('base64');
      
      const createFileResponse = await fetch(`https://api.github.com/repos/${owner}/${repo}/contents/${filePath}`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Accept': 'application/vnd.github.v3+json',
          'User-Agent': 'Test-Case-Generator',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          message: `Add ${testFile.filename}`,
          content: fileContent,
          branch: finalBranchName
        })
      });

      if (createFileResponse.ok) {
        createdFiles.push(filePath);
        console.log(`Created file: ${filePath}`);
      } else {
        console.warn(`Failed to create file: ${filePath}`);
      }
    }

    // Step 5: Create the pull request
    const prResponse = await fetch(`https://api.github.com/repos/${owner}/${repo}/pulls`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Accept': 'application/vnd.github.v3+json',
        'User-Agent': 'Test-Case-Generator',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        title: title,
        body: `${body}\n\n## Generated Test Files:\n${createdFiles.map(file => `- ${file}`).join('\n')}\n\n*Generated by Test Case Generator*`,
        head: finalBranchName,
        base: defaultBranch
      })
    });

    if (!prResponse.ok) {
      const errorData = await prResponse.text();
      console.error('Failed to create pull request:', errorData);
      throw new Error('Failed to create pull request');
    }

    const pullRequest = await prResponse.json();
    console.log(`Successfully created pull request #${pullRequest.number}`);

    res.json({
      success: true,
      pullRequest: {
        number: pullRequest.number,
        title: pullRequest.title,
        url: pullRequest.html_url,
        branch: finalBranchName
      },
      createdFiles: createdFiles
    });

  } catch (error) {
    console.error('Error creating pull request:', error);
    res.status(500).json({ 
      error: 'Internal server error', 
      message: error.message 
    });
  }
};
